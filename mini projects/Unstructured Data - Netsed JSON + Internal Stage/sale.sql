CREATE OR REPLACE DATABASE SALES_DATA;

CREATE OR REPLACE SCHEMA SALES_DATA.RAW_DATA;

CREATE OR REPLACE SCHEMA SALES_DATA.FLATTEN_DATA;

--------------------- Create Raw Table in RAW_DATA Schema
CREATE OR REPLACE TABLE SALES_DATA.RAW_DATA.SALES_RAW (
    JSON_DATA VARIANT
);

---------------------Create Flattened Table in FLATTEN_DATA Schema
CREATE OR REPLACE TABLE SALES_DATA.FLATTEN_DATA.SALES_FLATTEN (
    COMPANIES STRING,
    SALES_PERIOD STRING,
    TOTAL_REVENUE FLOAT,
    TOTAL_UNITS_SOLD FLOAT,
    REGIONS STRING,
    TOTAL_SALES FLOAT,
    PRODUCTS STRING,
    UNITS_SOLD FLOAT,
    REVENUE FLOAT
);

---------------------Create Internal Stage in RAW_DATA Schema
CREATE OR REPLACE STAGE SALES_DATA.RAW_DATA.SALES_STAGE;

---------------------Load JSON File into SALES_RAW
COPY INTO SALES_DATA.RAW_DATA.SALES_RAW
FROM @SALES_DATA.RAW_DATA.SALES_STAGE/sales_data.json
FILE_FORMAT = (TYPE = 'JSON');

--
SELECT * FROM SALES_DATA.RAW_DATA.SALES_RAW;

---------------------Flatten and Insert into SALES_FLATTEN

INSERT INTO SALES_DATA.FLATTEN_DATA.SALES_FLATTEN
SELECT
    company.key::STRING AS COMPANIES,
    company.value:sales_period::STRING AS SALES_PERIOD,
    company.value:total_revenue::FLOAT AS TOTAL_REVENUE,
    company.value:total_units_sold::FLOAT AS TOTAL_UNITS_SOLD,
    region.key::STRING AS REGIONS,
    region.value:total_sales::FLOAT AS TOTAL_SALES,
    product.key::STRING AS PRODUCTS,
    product.value:units_sold::FLOAT AS UNITS_SOLD,
    product.value:revenue::FLOAT AS REVENUE
FROM SALES_DATA.RAW_DATA.SALES_RAW,
LATERAL FLATTEN(INPUT => JSON_DATA:companies) AS company,
LATERAL FLATTEN(INPUT => company.value:regions) AS region,
LATERAL FLATTEN(INPUT => region.value:products) AS product;

--
SELECT * FROM SALES_DATA.FLATTEN_DATA.SALES_FLATTEN;

---------------------Data Analysis

--Revenue for Each Company
SELECT COMPANIES, SUM(REVENUE) AS TOTAL_REVENUE
FROM SALES_DATA.FLATTEN_DATA.SALES_FLATTEN
GROUP BY COMPANIES
ORDER BY TOTAL_REVENUE DESC;

--Top 3 Companies with the Highest Revenue

SELECT COMPANIES, SUM(REVENUE) AS TOTAL_REVENUE
FROM SALES_DATA.FLATTEN_DATA.SALES_FLATTEN
GROUP BY COMPANIES
ORDER BY TOTAL_REVENUE DESC
LIMIT 3;

--2 Regions with the Lowest Units Sold
SELECT REGIONS, SUM(UNITS_SOLD) AS TOTAL_UNITS
FROM SALES_DATA.FLATTEN_DATA.SALES_FLATTEN
GROUP BY REGIONS
ORDER BY TOTAL_UNITS ASC
LIMIT 2;


-- Product with the Highest Revenue
SELECT PRODUCTS, SUM(REVENUE) AS TOTAL_REVENUE
FROM SALES_DATA.FLATTEN_DATA.SALES_FLATTEN
GROUP BY PRODUCTS
ORDER BY TOTAL_REVENUE DESC
LIMIT 1;

--Product with the Fewest Units Sold
SELECT PRODUCTS, SUM(UNITS_SOLD) AS TOTAL_UNITS
FROM SALES_DATA.FLATTEN_DATA.SALES_FLATTEN
GROUP BY PRODUCTS
ORDER BY TOTAL_UNITS ASC
LIMIT 1;

--Region with the Highest Number of Laptop Units Sold
SELECT REGIONS, SUM(UNITS_SOLD) AS LAPTOP_UNITS
FROM SALES_DATA.FLATTEN_DATA.SALES_FLATTEN
WHERE PRODUCTS = 'laptop'
GROUP BY REGIONS
ORDER BY LAPTOP_UNITS DESC
LIMIT 1;

--Bottom 3 Company-Region Pairs by Smartphone Revenue

SELECT COMPANIES, REGIONS, SUM(REVENUE) AS SMARTPHONE_REVENUE
FROM SALES_DATA.FLATTEN_DATA.SALES_FLATTEN
WHERE PRODUCTS = 'smartphone'
GROUP BY COMPANIES, REGIONS
ORDER BY SMARTPHONE_REVENUE ASC
LIMIT 3;




