CREATE OR REPLACE DATABASE PRODUCT_DB;

CREATE OR REPLACE SCHEMA PRODUCT_DB.PRODUCT_DATA;

--------------------------------------------Create PRODUCT_SRC Table
DROP TABLE IF EXISTS PRODUCT_DB.PRODUCT_DATA.PRODUCT_SRC
CREATE OR REPLACE TABLE PRODUCT_DB.PRODUCT_DATA.PRODUCT_SRC (
    PRODUCTID STRING,
    PRODUCTNAME STRING,
    CATEGORY STRING,
    PRICE FLOAT,
    STOCKQUANTITY FLOAT,
    SUPPLIER STRING,
    RATING FLOAT
);

--------------------------------------------Create PRODUCT_TGT Table
DROP TABLE IF EXISTS PRODUCT_DB.PRODUCT_DATA.PRODUCT_TGT;

CREATE TABLE PRODUCT_DB.PRODUCT_DATA.PRODUCT_TGT (
    PRODUCTID STRING,
    PRODUCTNAME STRING,
    CATEGORY STRING,
    PRICE FLOAT,
    STOCKQUANTITY FLOAT,
    SUPPLIER STRING,
    RATING FLOAT,
    LAST_UPDATED_AT TIMESTAMP_NTZ
);

--------------------------------------------Create Stream on PRODUCT_SRC--“CDC” (Change Data Capture) layer.
CREATE OR REPLACE STREAM PRODUCT_DB.PRODUCT_DATA.PRODUCT_STREAM 
ON TABLE PRODUCT_DB.PRODUCT_DATA.PRODUCT_SRC;



--------------------------------------------Create Task for SCD1 Using MERGE

CREATE OR REPLACE TASK PRODUCT_DB.PRODUCT_DATA.PRODUCT_TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '1 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('PRODUCT_DB.PRODUCT_DATA.PRODUCT_STREAM')
AS
MERGE INTO PRODUCT_DB.PRODUCT_DATA.PRODUCT_TGT TGT
USING (
    SELECT * FROM (
  SELECT *, ROW_NUMBER() OVER (PARTITION BY PRODUCTID ORDER BY CURRENT_TIMESTAMP()) AS rn
  FROM PRODUCT_DB.PRODUCT_DATA.PRODUCT_STREAM
) WHERE rn = 1
) SRC
ON TGT.PRODUCTID = SRC.PRODUCTID

-- ✅ Only update if any field actually changed
WHEN MATCHED AND (
    TGT.PRODUCTNAME     != SRC.PRODUCTNAME OR
    TGT.CATEGORY        != SRC.CATEGORY OR
    TGT.PRICE           != SRC.PRICE OR
    TGT.STOCKQUANTITY   != SRC.STOCKQUANTITY OR
    TGT.SUPPLIER        != SRC.SUPPLIER OR
    TGT.RATING          != SRC.RATING
) THEN
UPDATE SET
    PRODUCTNAME     = SRC.PRODUCTNAME,
    CATEGORY        = SRC.CATEGORY,
    PRICE           = SRC.PRICE,
    STOCKQUANTITY   = SRC.STOCKQUANTITY,
    SUPPLIER        = SRC.SUPPLIER,
    RATING          = SRC.RATING,
    LAST_UPDATED_AT = CURRENT_TIMESTAMP()

-- ✅ Only insert if it doesn't already exist (based on PK match)
WHEN NOT MATCHED THEN
INSERT (
    PRODUCTID, PRODUCTNAME, CATEGORY, PRICE, STOCKQUANTITY, SUPPLIER, RATING, LAST_UPDATED_AT
)
VALUES (
    SRC.PRODUCTID, SRC.PRODUCTNAME, SRC.CATEGORY, SRC.PRICE, SRC.STOCKQUANTITY, SRC.SUPPLIER, SRC.RATING,
    CURRENT_TIMESTAMP()
);

-------------------------------------------- Start the Task

ALTER TASK PRODUCT_DB.PRODUCT_DATA.PRODUCT_TASK RESUME;



-------------------------------------------- Create Internal Stage
CREATE OR REPLACE STAGE PRODUCT_DB.PRODUCT_DATA.PRODUCT_STAGE;


--------------------------------------------Load product_fulldata.csv into PRODUCT_SRC

-- TRUNCATE TABLE PRODUCT_DB.PRODUCT_DATA.PRODUCT_SRC;



COPY INTO PRODUCT_DB.PRODUCT_DATA.PRODUCT_SRC
FROM @PRODUCT_DB.PRODUCT_DATA.PRODUCT_STAGE/product_fulldata.csv
FILE_FORMAT = (TYPE = 'CSV', SKIP_HEADER = 1);


--
SELECT * FROM PRODUCT_DB.PRODUCT_DATA.PRODUCT_TGT;


--------------------------------------------Upload product_changedata.csv to the Stage again


--------------------------------------------Load product_changedata.csv into PRODUCT_SRC
COPY INTO PRODUCT_DB.PRODUCT_DATA.PRODUCT_SRC
FROM @PRODUCT_DB.PRODUCT_DATA.PRODUCT_STAGE/product_changedata.csv
FILE_FORMAT = (TYPE = 'CSV', SKIP_HEADER = 1);




--
SELECT * FROM PRODUCT_DB.PRODUCT_DATA.PRODUCT_TGT
where productid in (
'P001' , 
'P050' ,
'P075' ,
'P100'
)
ORDER BY PRODUCTID;



-------------------------------------------------------------------extra SCD2 

DROP TABLE IF EXISTS PRODUCT_DB.PRODUCT_DATA.PRODUCT_TGT;

CREATE TABLE PRODUCT_DB.PRODUCT_DATA.PRODUCT_TGT (
    PRODUCTID STRING,
    PRODUCTNAME STRING,
    CATEGORY STRING,           -- SCD Type 1: overwrite
    PRICE FLOAT,               -- SCD Type 2: if changed → insert new row
    STOCKQUANTITY FLOAT,
    SUPPLIER STRING,
    RATING FLOAT,
    IS_ACTIVE BOOLEAN,         -- SCD2 tracking flag
    START_DATE TIMESTAMP_NTZ,  -- SCD2 history tracking
    END_DATE TIMESTAMP_NTZ,    -- SCD2 history tracking
    LAST_UPDATED_AT TIMESTAMP_NTZ
);

-------------------------------------------- task
CREATE OR REPLACE TASK PRODUCT_DB.PRODUCT_DATA.PRODUCT_TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '1 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('PRODUCT_DB.PRODUCT_DATA.PRODUCT_STREAM')
AS

-- Step 1: Expire old active rows if price changed
UPDATE PRODUCT_DB.PRODUCT_DATA.PRODUCT_TGT TGT
SET
    IS_ACTIVE = FALSE,
    END_DATE = CURRENT_TIMESTAMP(),
    LAST_UPDATED_AT = CURRENT_TIMESTAMP()
FROM (
    SELECT *
    FROM PRODUCT_DB.PRODUCT_DATA.PRODUCT_STREAM
) SRC
WHERE
    TGT.PRODUCTID = SRC.PRODUCTID
    AND TGT.IS_ACTIVE = TRUE
    AND TGT.PRICE != SRC.PRICE;

-- Step 2: Insert new row if price changed (SCD2)
INSERT INTO PRODUCT_DB.PRODUCT_DATA.PRODUCT_TGT (
    PRODUCTID, PRODUCTNAME, CATEGORY, PRICE,
    STOCKQUANTITY, SUPPLIER, RATING,
    IS_ACTIVE, START_DATE, END_DATE, LAST_UPDATED_AT
)
SELECT
    SRC.PRODUCTID, SRC.PRODUCTNAME, SRC.CATEGORY, SRC.PRICE,
    SRC.STOCKQUANTITY, SRC.SUPPLIER, SRC.RATING,
    TRUE, CURRENT_TIMESTAMP(), NULL, CURRENT_TIMESTAMP()
FROM PRODUCT_DB.PRODUCT_DATA.PRODUCT_STREAM SRC
LEFT JOIN PRODUCT_DB.PRODUCT_DATA.PRODUCT_TGT TGT
    ON SRC.PRODUCTID = TGT.PRODUCTID AND TGT.IS_ACTIVE = TRUE
WHERE TGT.PRICE IS NULL OR TGT.PRICE != SRC.PRICE;

-- Step 3: Update category (SCD1) if changed but price stayed same
UPDATE PRODUCT_DB.PRODUCT_DATA.PRODUCT_TGT TGT
SET
    CATEGORY = SRC.CATEGORY,
    LAST_UPDATED_AT = CURRENT_TIMESTAMP()
FROM PRODUCT_DB.PRODUCT_DATA.PRODUCT_STREAM SRC
WHERE
    TGT.PRODUCTID = SRC.PRODUCTID
    AND TGT.IS_ACTIVE = TRUE
    AND TGT.CATEGORY != SRC.CATEGORY
    AND TGT.PRICE = SRC.PRICE;











