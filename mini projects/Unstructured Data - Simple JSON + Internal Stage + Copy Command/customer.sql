CREATE OR REPLACE DATABASE CUSTOMER_DATA;

CREATE OR REPLACE SCHEMA CUSTOMER_DATA.RAW_DATA;

CREATE OR REPLACE SCHEMA CUSTOMER_DATA.FLATTEN_DATA;

---------Create Raw Table in RAW_DATA Schema
CREATE OR REPLACE TABLE CUSTOMER_DATA.RAW_DATA.CUSTOMER_RAW (
    JSON_DATA VARIANT
);

---------Create Flattened Table in FLATTEN_DATA Schema
CREATE OR REPLACE TABLE CUSTOMER_DATA.FLATTEN_DATA.CUSTOMER_FLATTEN (
    CUSTOMERID INT,
    NAME STRING,
    EMAIL STRING,
    REGION STRING,
    COUNTRY STRING,
    PRODUCTNAME STRING,
    PRODUCTBRAND STRING,
    CATEGORY STRING,
    QUANTITY INT,
    PRICEPERUNIT FLOAT,
    TOTALSALES FLOAT,
    PURCHASEMODE STRING,
    MODEOFPAYMENT STRING,
    PURCHASEDATE DATE
);

---------Create Internal Stage in RAW_DATA Schema
CREATE OR REPLACE STAGE CUSTOMER_DATA.RAW_DATA.CUSTOMER_STAGE;

---------Load JSON File into CUSTOMER_RAW 
COPY INTO CUSTOMER_DATA.RAW_DATA.CUSTOMER_RAW
FROM @CUSTOMER_DATA.RAW_DATA.CUSTOMER_STAGE/customer_data.json
FILE_FORMAT = (TYPE = 'JSON');

--
SELECT * FROM CUSTOMER_DATA.RAW_DATA.CUSTOMER_RAW;

---------JSON Flattening using LATERAL FLATTEN
INSERT INTO CUSTOMER_DATA.FLATTEN_DATA.CUSTOMER_FLATTEN
SELECT
    value:customerid::INT AS CUSTOMERID,
    value:name::STRING AS NAME,
    value:email::STRING AS EMAIL,
    value:region::STRING AS REGION,
    value:country::STRING AS COUNTRY,
    value:productname::STRING AS PRODUCTNAME,
    value:productbrand::STRING AS PRODUCTBRAND,
    value:category::STRING AS CATEGORY,
    value:quantity::INT AS QUANTITY,
    value:priceperunit::FLOAT AS PRICEPERUNIT,
    value:totalsales::FLOAT AS TOTALSALES,
    value:purchasemode::STRING AS PURCHASEMODE,
    value:modeofpayment::STRING AS MODEOFPAYMENT,
    TO_DATE(value:purchasedate::STRING) AS PURCHASEDATE
FROM CUSTOMER_DATA.RAW_DATA.CUSTOMER_RAW,
LATERAL FLATTEN(INPUT => JSON_DATA);

--
SELECT * FROM CUSTOMER_DATA.FLATTEN_DATA.CUSTOMER_FLATTEN;


---------Data Analysis Queries on CUSTOMER_FLATTEN

--Total Sales by Region
SELECT REGION, SUM(TOTALSALES) AS TOTAL_SALES
FROM CUSTOMER_DATA.FLATTEN_DATA.CUSTOMER_FLATTEN
GROUP BY REGION
ORDER BY TOTAL_SALES DESC;

--Region with Highest Sales
SELECT REGION, SUM(TOTALSALES) AS TOTAL_SALES
FROM CUSTOMER_DATA.FLATTEN_DATA.CUSTOMER_FLATTEN
GROUP BY REGION
ORDER BY TOTAL_SALES DESC
LIMIT 1;

--Total Quantity Sold by Product Brand
SELECT PRODUCTBRAND, SUM(QUANTITY) AS TOTAL_QUANTITY
FROM CUSTOMER_DATA.FLATTEN_DATA.CUSTOMER_FLATTEN
GROUP BY PRODUCTBRAND
ORDER BY TOTAL_QUANTITY DESC;

--Product with the Least Quantity Sold
SELECT PRODUCTNAME, SUM(QUANTITY) AS TOTAL_QUANTITY
FROM CUSTOMER_DATA.FLATTEN_DATA.CUSTOMER_FLATTEN
GROUP BY PRODUCTNAME
ORDER BY TOTAL_QUANTITY ASC
LIMIT 1;

--Customer with Highest Total Purchase
SELECT CUSTOMERID, NAME, SUM(TOTALSALES) AS TOTAL_SPENT
FROM CUSTOMER_DATA.FLATTEN_DATA.CUSTOMER_FLATTEN
GROUP BY CUSTOMERID, NAME
ORDER BY TOTAL_SPENT DESC
LIMIT 1;

--Product Name and Brand with Lowest Unit Price
SELECT PRODUCTNAME, PRODUCTBRAND, MIN(PRICEPERUNIT) AS LOWEST_PRICE
FROM CUSTOMER_DATA.FLATTEN_DATA.CUSTOMER_FLATTEN
GROUP BY PRODUCTNAME, PRODUCTBRAND
ORDER BY LOWEST_PRICE ASC
LIMIT 1;


--Top 5 Best-Selling Products
SELECT PRODUCTNAME, SUM(QUANTITY) AS TOTAL_SOLD
FROM CUSTOMER_DATA.FLATTEN_DATA.CUSTOMER_FLATTEN
GROUP BY PRODUCTNAME
ORDER BY TOTAL_SOLD DESC
LIMIT 5;

--5 Countries with the Lowest Total Sales

SELECT COUNTRY, SUM(TOTALSALES) AS TOTAL_SALES
FROM CUSTOMER_DATA.FLATTEN_DATA.CUSTOMER_FLATTEN
GROUP BY COUNTRY
ORDER BY TOTAL_SALES ASC
LIMIT 5;


